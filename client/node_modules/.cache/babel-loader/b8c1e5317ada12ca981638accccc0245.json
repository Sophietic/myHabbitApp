{"ast":null,"code":"import axios from \"axios\"; // Contains all the methods and also we need to use the create method of axios to build a new instance\n\nclass AuthService {\n  constructor() {\n    this.signup = (email, password) => {\n      return this.service.post(\"/signup\", {\n        email,\n        password\n      }).then(response => response.data);\n    };\n\n    this.login = (email, password) => {\n      return this.service.post(\"/login\", {\n        email,\n        password\n      }).then(response => response.data);\n    };\n\n    this.logout = () => {\n      return this.service.post(\"/logout\", {}).then(response => response.data);\n    };\n\n    this.isAuthenticated = () => {\n      return this.service.get(\"/loggedin\").then(response => response.data);\n    };\n\n    this.service = axios.create({\n      baseURL: \"http://localhost:5000/api\",\n      withCredentials: true // indicates whether or not cross-site Access-Control requests should be made using credentials\n\n    });\n  } // Brug signup\n\n\n}\n\nexport default AuthService;","map":{"version":3,"sources":["/home/sophiepa/ironhack/finalproject/myIronhackProject/client/src/services/auth.service.js"],"names":["axios","AuthService","constructor","signup","email","password","service","post","then","response","data","login","logout","isAuthenticated","get","create","baseURL","withCredentials"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,MAAMC,WAAN,CAAkB;AAChBC,EAAAA,WAAW,GAAG;AAAA,SAQdC,MARc,GAQL,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC5B,aAAO,KAAKC,OAAL,CACJC,IADI,CACC,SADD,EACY;AAAEH,QAAAA,KAAF;AAASC,QAAAA;AAAT,OADZ,EAEJG,IAFI,CAEEC,QAAD,IAAcA,QAAQ,CAACC,IAFxB,CAAP;AAGD,KAZa;;AAAA,SAcdC,KAdc,GAcN,CAACP,KAAD,EAAQC,QAAR,KAAqB;AAC3B,aAAO,KAAKC,OAAL,CACJC,IADI,CACC,QADD,EACW;AAAEH,QAAAA,KAAF;AAASC,QAAAA;AAAT,OADX,EAEJG,IAFI,CAEEC,QAAD,IAAcA,QAAQ,CAACC,IAFxB,CAAP;AAGD,KAlBa;;AAAA,SAqBZE,MArBY,GAqBH,MAAM;AACb,aAAO,KAAKN,OAAL,CACJC,IADI,CACC,SADD,EACY,EADZ,EAEJC,IAFI,CAEEC,QAAD,IAAcA,QAAQ,CAACC,IAFxB,CAAP;AAGD,KAzBW;;AAAA,SA2BZG,eA3BY,GA2BM,MAAM;AACtB,aAAO,KAAKP,OAAL,CAAaQ,GAAb,CAAiB,WAAjB,EAA8BN,IAA9B,CAAoCC,QAAD,IAAcA,QAAQ,CAACC,IAA1D,CAAP;AACD,KA7BW;;AACZ,SAAKJ,OAAL,GAAeN,KAAK,CAACe,MAAN,CAAa;AAC1BC,MAAAA,OAAO,EAAE,2BADiB;AAE1BC,MAAAA,eAAe,EAAE,IAFS,CAEH;;AAFG,KAAb,CAAf;AAID,GANe,CAQhB;;;AARgB;;AAkClB,eAAehB,WAAf","sourcesContent":["import axios from \"axios\";\n\n// Contains all the methods and also we need to use the create method of axios to build a new instance\nclass AuthService {\n  constructor() {\n    this.service = axios.create({\n      baseURL: \"http://localhost:5000/api\",\n      withCredentials: true, // indicates whether or not cross-site Access-Control requests should be made using credentials\n    });\n  }\n\n  // Brug signup\n  signup = (email, password) => {\n    return this.service\n      .post(\"/signup\", { email, password })\n      .then((response) => response.data);\n  };\n  // Brug Login\n  login = (email, password) => {\n    return this.service\n      .post(\"/login\", { email, password })\n      .then((response) => response.data);\n  };\n\n    // Brug Loguit\n    logout = () => {\n      return this.service\n        .post(\"/logout\", {})\n        .then((response) => response.data);\n    };\n\n    isAuthenticated = () => {\n      return this.service.get(\"/loggedin\").then((response) => response.data);\n    };\n\n\n}\nexport default AuthService;\n"]},"metadata":{},"sourceType":"module"}